{"version":3,"sources":["common/TileTypes.js","components/Tile.js","components/Grid.js","components/Modal.js","components/SelectTileForm.js","services/PathService.js","common/utils.js","components/Navigator.js","App.js","serviceWorker.js","index.js"],"names":["start","name","classes","useOnce","finish","rock","Tile","onClick","tile","typeClass","tileType","TileTypes","find","t","type","clickHandler","React","useCallback","className","join","paths","Grid","tiles","onTileClick","style","width","gridSize","map","tileId","key","Modal","onClose","children","styles","display","isOpen","SelectTileForm","onSubmit","types","selected","useState","formValues","setFormValues","submitFormHandler","e","preventDefault","changeValueHandler","target","value","id","onChange","checked","htmlFor","defaultLocation","x","y","getMoves","a","sideLength","impassables","startingLoc","endingLoc","axios","post","result","data","console","log","alert","getTileCoords","index","updateTilePath","position","newTiles","forEach","undefined","i","moves","length","moveTo","hasNextMove","nextMove","tileIndex","findIndex","pos","push","gridOptions","Navigator","setTiles","setGridSize","activeTile","setActiveTile","handleTileClick","setTileType","_","values","tileToUpdate","indexOf","newTile","previousTile","item","oldTile","utils","setGrid","event","calculatePath","filter","useEffect","Array","keys","number","canCalculate","modal","flexDirection","justifyContent","opt","disabled","App","wrap","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cd8a4e74.chunk.js","sourcesContent":["export const start = {\n    name: 'start',\n    classes: 'start',\n    useOnce: true\n};\nexport const finish = {\n    name: 'finish',\n    classes: 'finish',\n    useOnce: true\n};\nexport const grass = {\n    name: 'grass',\n    classes: 'grass',\n    useOnce: false\n};\nexport const rock = {\n    name: 'rock',\n    classes: 'rock',\n    useOnce: false\n};\n\nexport default [start, finish, grass, rock]","import React from 'react';\nimport './Tile.css';\nimport TileTypes from '../common/TileTypes';\n\nconst Tile = ({ onClick, tile }) => {\n    let typeClass = null;\n    const tileType = TileTypes.find(t => t.name === tile.type);\n    if (tileType)\n    {\n        typeClass = tileType.classes;\n    }\n\n    const clickHandler = React.useCallback(() => {\n        onClick(tile);\n    }, [onClick, tile])\n\n    return (\n        <div className='tile' onClick={clickHandler}>\n            <span className={['type', typeClass].join(' ')}></span>\n            {tile.paths && <span className={['nav-path', 'path-' + tile.paths.join('')].join(' ')}></span>}\n        </div>\n    )\n}\n\nexport default Tile;","import React from 'react';\nimport Tile from './Tile';\nimport './Grid.css';\n\nconst Grid = ({ tiles, onTileClick, gridSize }) => {\n\n    const style = {\n        width: (33 * gridSize) + 'px'\n    }\n    \n    return (\n        <div className='grid'>\n            <div className='tiles' style={style}>\n                {tiles.map((tile, tileId) => {\n                    return (\n                        <Tile onClick={onTileClick} key={`tile-${tileId}`} tile={tile} />\n                    )\n                })}\n            </div>\n        </div>\n    )\n}\n\nexport default Grid;","import React from 'react';\nimport './Modal.css';\n\nconst Modal = ({ onClose, children, isOpen }) => {\n    \n    const styles = {\n        display: isOpen ? 'block' : 'none'\n    }\n    return (\n        <div style={styles}>\n            <div className=\"modal-bg\"></div>\n            <div className=\"modal-wrapper\">\n                <span className=\"modal-close\" onClick={onClose}>X</span>\n                <div className=\"modal-item\">\n                    {children}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Modal;","import React, { useState } from 'react';\nimport './SelectTileForm.css';\n\nconst SelectTileForm = ({ onSubmit, types, selected }) => {\n\n    const [formValues, setFormValues] = useState({ type: selected });\n\n    const submitFormHandler = React.useCallback((e) => {\n        e.preventDefault();\n        onSubmit(e, formValues);\n    }, [onSubmit, formValues]);\n\n    const changeValueHandler = React.useCallback((e) => {\n        setFormValues({ [e.target.name]: e.target.value });\n    }, [])\n\n    return (\n        <form onSubmit={submitFormHandler}>\n            <div className=\"select-type\">\n                {types.map(tile => {\n                    return (\n                        <div key={`selectType-` + tile.name} className=\"form-control\">\n                            <input id={`selectType-` + tile.name} type=\"radio\" name=\"type\" value={tile.name} onChange={changeValueHandler} checked={formValues.type === tile.name} />\n                            <label htmlFor={`selectType-` + tile.name}>\n                                <span className={\"type \" + tile.classes}></span>\n                            </label>\n                        </div>\n                    )\n                })}\n            </div>\n            <button type=\"submit\">Confirm</button>\n    </form>\n    );\n}\n\nexport default SelectTileForm;","import axios from 'axios';\n\nconst defaultLocation = { x: 0, y: 0 };\n\nexport const getMoves = async ({ sideLength = 4, impassables = [], startingLoc = defaultLocation, endingLoc = defaultLocation }) => {\n    try {\n        const result = await axios.post(`https://frozen-reef-96768.herokuapp.com/find-path`, { \n            sideLength,\n            impassables,\n            startingLoc,\n            endingLoc\n        });\n\n        return result.data;\n    } catch (e) {\n        console.log('error on getPath', e);\n        alert('Unable to retrieve the path');\n    }\n}","import TileTypes from '../common/TileTypes';\n\nexport const generateTiles = (gridSize) => {\n    const tiles = [];\n    [...Array((gridSize ** 2)).keys()].forEach((number, index) => {\n        tiles[index] = {\n            ...getTileCoords(index, gridSize),\n            number\n        }\n    });\n    return tiles;\n}\n\nconst getTileCoords = (index, gridSize) => {\n\n    const x = index % gridSize;\n    const y = index / gridSize << 0;\n\n    return {\n        y, \n        x,\n        tileId: index\n    }\n}\n\nexport const updateTile = (tiles, tileToUpdate, values) => {\n    const newTiles = [...tiles];\n    var tileIndex = newTiles.indexOf(tileToUpdate);\n\n    var newTile = {...tileToUpdate};\n    newTile.type = values.type;\n\n    var tileType = TileTypes.find(t => t.name === values.type);\n    if (values.type === tileType.name && tileType.useOnce) {\n        var previousTile = newTiles.findIndex(item => item.type === tileType.name);\n        if (previousTile >= 0)\n        {\n            var oldTile = {...newTiles[previousTile]};\n            oldTile.type = undefined;\n            newTiles[previousTile] = oldTile;\n        }\n    }\n    newTiles[tileIndex] = newTile;\n\n    return newTiles;\n}\n\nexport const updateTilePath = (tiles, result, position) => {\n    const newTiles = [...tiles];\n    //reset the path\n    newTiles.forEach(t => t.paths = undefined);\n\n    for (let i = 0; i < result.moves.length; i++) {\n\n        const moveTo = result.moves[i];\n\n        const hasNextMove = result.moves.length > i+1;\n        const nextMove = hasNextMove && result.moves[i+1];\n\n        if (moveTo === 'R') position.x++;\n        if (moveTo === 'D') position.y++;\n        if (moveTo === 'L') position.x--;\n        if (moveTo === 'U') position.y--;\n\n        var tileIndex = tiles.findIndex(pos => pos.x === position.x && pos.y === position.y);\n        var moves = [moveTo];\n\n        if (nextMove && moveTo !== nextMove){\n            moves.push(nextMove);\n        }\n\n        if (hasNextMove)\n            newTiles[tileIndex].paths = moves;\n    }\n    return newTiles;\n}","import React, { useState, useEffect } from 'react';\nimport Grid from './Grid';\nimport Modal from './Modal';\nimport SelectTileForm from './SelectTileForm';\n\nimport TileTypes, { start, finish, rock } from '../common/TileTypes';\n\nimport { getMoves } from '../services/PathService';\nimport * as utils from '../common/utils';\n\nvar gridOptions = ['select', 4,5,6,7,8];\n\nconst Navigator = () =>{\n    const [tiles, setTiles] = useState([]);\n    const [gridSize, setGridSize] = useState(0);\n    const [activeTile, setActiveTile] = useState(null);\n\n    const handleTileClick = React.useCallback((tile) => {\n        setActiveTile(tile);\n    }, []);\n\n    const setTileType = React.useCallback((_, values) => {\n\n        const selectedType = values.type;\n        if (!selectedType) {\n            alert('Please select a type');\n            return;\n        }\n\n        const newTiles = utils.updateTile(tiles, activeTile, values)\n        \n        setActiveTile(null);\n        setTiles(newTiles);\n\n    }, [tiles, activeTile]);\n\n    const setGrid = React.useCallback((event) => {\n        setGridSize(event.target.value);\n    }, []);\n\n    const startingLoc = tiles.find(item => item.type === start.name);\n    const endingLoc = tiles.find(item => item.type === finish.name);\n\n    const calculatePath = async () => {\n        const impassables = tiles.filter(item => item.type === rock.name);\n        const result = await getMoves({ sideLength: gridSize, impassables, startingLoc, endingLoc });\n\n        let position = {...startingLoc};\n        const newTiles = utils.updateTilePath(tiles, result, position);\n        setTiles(newTiles);\n    };\n\n    useEffect(() => {\n        const newTiles = utils.generateTiles(gridSize)\n        setTiles(newTiles);\n    }, [gridSize]);\n\n    const canCalculate = startingLoc && endingLoc;\n\n    const modal = activeTile && (\n        <Modal onClose={() => setActiveTile(null)} isOpen={true}>\n            <h3>Select your type</h3>\n            <SelectTileForm types={TileTypes} selected={activeTile ? activeTile.type : null} onSubmit={setTileType} />\n        </Modal>\n    );\n\n    return (\n        <div style={{display: 'flex', flexDirection: 'column', justifyContent: 'space-between'}}>\n            {modal}\n            <Grid gridSize={gridSize} tiles={tiles} onTileClick={handleTileClick} />\n            <select onChange={setGrid} value={gridSize}>\n            {gridOptions.map(opt => {\n                return <option key={opt}>{opt}</option>\n            })}\n            </select>\n            <button className='button-primary' type=\"button\" disabled={!canCalculate} onClick={calculatePath}>Calculate</button>\n            <button type=\"button\" disabled={!canCalculate} onClick={()=>setGridSize(0)}>Reset</button>\n        </div>\n    )\n}\n\nexport default Navigator;","import React from 'react';\nimport './App.css';\nimport Navigator from './components/Navigator';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <h3 style={{wrap: 'nowrap'}}>Pokemon Navigator</h3>\n      <Navigator />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}